import logging
import os
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters
)
from telegram_calendar import DetailedTelegramCalendar, LSTEP

from google.oauth2 import service_account
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# === –ù–ê–°–¢–†–û–ô –°–í–û–ò –ü–ê–†–ê–ú–ï–¢–†–´ ===
TELEGRAM_TOKEN = '–¢–í–û–ô_TELEGRAM_BOT_TOKEN'
AUTHORIZED_USER_ID = 123456789  # —Ç–≤–æ–π Telegram ID
CALENDAR_ID = 'primary'  # –∏–ª–∏ —Ç–≤–æ–π id –∫–∞–ª–µ–Ω–¥–∞—Ä—è
CREDENTIALS_JSON = 'credentials.json'

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google
SCOPES = ['https://www.googleapis.com/auth/calendar']
creds = service_account.Credentials.from_service_account_file(
    CREDENTIALS_JSON, scopes=SCOPES
)
service = build('calendar', 'v3', credentials=creds)


# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ —Ç—ã –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ===
def restricted(func):
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id != AUTHORIZED_USER_ID:
            await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        return await func(update, context)
    return wrapped


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"],
        ["üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"],
        ["üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üìå –Ø —É–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏–º Google –ö–∞–ª–µ–Ω–¥–∞—Ä—ë–º.\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=reply_markup
    )


# === –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ (–≤—ã–±–æ—Ä –¥–∞—Ç—ã) ===
@restricted
async def create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    calendar, step = DetailedTelegramCalendar().build()
    await update.message.reply_text(
        f"üìÖ –í—ã–±–µ—Ä–∏ {LSTEP[step]}",
        reply_markup=calendar
    )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
@restricted
async def calendar_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    result, key, step = DetailedTelegramCalendar().process(query.data)
    if not result and key:
        await query.edit_message_text(
            f"üìÖ –í—ã–±–µ—Ä–∏ {LSTEP[step]}",
            reply_markup=key
        )
    elif result:
        context.user_data['selected_date'] = result
        await query.edit_message_text(
            f"üìÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {result}\n‚åö –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):"
        )


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@restricted
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –ï—Å–ª–∏ –∂–¥—ë–º –≤—Ä–µ–º—è
    if 'selected_date' in context.user_data and ':' in text:
        try:
            selected_date = context.user_data['selected_date']
            selected_time = datetime.strptime(text.strip(), "%H:%M").time()
            start_dt = datetime.combine(selected_date, selected_time)
            end_dt = start_dt + timedelta(hours=1)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å

            event = {
                'summary': '–ú–æ—ë —Å–æ–±—ã—Ç–∏–µ',
                'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Moscow'},
                'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Moscow'},
            }
            service.events().insert(calendarId=CALENDAR_ID, body=event).execute()

            await update.message.reply_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {start_dt.strftime('%Y-%m-%d %H:%M')}"
            )
            context.user_data.pop('selected_date')

        except ValueError:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –ß–ß:–ú–ú.")
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await create_event(update, context)
    elif text == "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await delete_event(update, context)
    elif text == "üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è":
        await show_events(update, context)
    else:
        await update.message.reply_text("ü§ñ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.")


# === –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è ===
@restricted
async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events_result = service.events().list(
        calendarId=CALENDAR_ID,
        timeMin=datetime.utcnow().isoformat() + 'Z',
        maxResults=5,
        singleEvents=True,
        orderBy='startTime'
    ).execute()
    events = events_result.get('items', [])

    if not events:
        await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    msg = "üóë –ù–∞–π–¥–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è:\n"
    for i, event in enumerate(events, start=1):
        start = event['start'].get('dateTime', event['start'].get('date'))
        msg += f"{i}. {event['summary']} ‚Äî {start}\n"

    msg += "\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    context.user_data['events_to_delete'] = events
    await update.message.reply_text(msg)


# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ===
@restricted
async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if 'events_to_delete' in context.user_data and text.isdigit():
        idx = int(text) - 1
        events = context.user_data['events_to_delete']
        if 0 <= idx < len(events):
            event_id = events[idx]['id']
            service.events().delete(calendarId=CALENDAR_ID, eventId=event_id).execute()
            await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
            context.user_data.pop('events_to_delete')
            return
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    elif 'selected_date' not in context.user_data:
        await update.message.reply_text("ü§ñ –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.")


# === –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è ===
@restricted
async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events_result = service.events().list(
        calendarId=CALENDAR_ID,
        timeMin=datetime.utcnow().isoformat() + 'Z',
        maxResults=5,
        singleEvents=True,
        orderBy='startTime'
    ).execute()
    events = events_result.get('items', [])

    if not events:
        await update.message.reply_text("üì≠ –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
        return

    msg = "üìå –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
    for event in events:
        start = event['start'].get('dateTime', event['start'].get('date'))
        msg += f"- {event['summary']} ‚Äî {start}\n"

    await update.message.reply_text(msg)


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(calendar_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), confirm_delete))

    app.run_polling()
